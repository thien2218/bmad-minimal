const fs = require("fs-extra");
const path = require("path");
const chalk = require("chalk");
const { generateTechPreferences } = require("./detection");

async function createTemplateFiles(workspacePath, config, projectInfo) {
	console.log(chalk.blue("üìù Generating template files..."));

	const bmadCorePath = path.join(workspacePath, ".bmad-core");
	const agentsPath = path.join(workspacePath, ".agents");

	// Generate config.json
	await createConfigFile(bmadCorePath, config);

	// Generate technical-preferences.md
	await createTechnicalPreferencesFile(bmadCorePath, config, projectInfo);

	// Create agent files
	await createAgentFiles(agentsPath, projectInfo);

	// Create placeholder files
	await createPlaceholderFiles(bmadCorePath, config);

	// Create planning files if requested
	if (config.includePlanning) {
		await createPlanningFiles(path.join(workspacePath, "planning"));
	}
}

async function createConfigFile(bmadCorePath, config) {
	const configContent = {
		root: ".bmad-core/",
		prd: {
			file: `${config.folders.docs}/prd.md`,
			version: "v4",
			sharded: true,
			shardedLocation: `${config.folders.docs}/prd`,
		},
		architecture: {
			file: `${config.folders.docs}/architecture.md`,
			version: "v4",
			sharded: true,
			shardedLocation: `${config.folders.docs}/architecture`,
		},
		customTechnicalDocuments: null,
		qaLocation: config.folders.qa,
		epic: {
			location: config.folders.epics,
			fileNamePattern: "epic-{epic_number}-*.yaml",
		},
		story: {
			location: config.folders.stories,
			fileNamePattern: "story-{epic_number}.{story_number}-*.yaml",
		},
	};

	await fs.writeJson(path.join(bmadCorePath, "config.json"), configContent, {
		spaces: 2,
	});
}

async function createTechnicalPreferencesFile(
	bmadCorePath,
	config,
	projectInfo
) {
	const techInfo = generateTechPreferences(projectInfo, config);

	const content = `# Technical Preferences

A living document that captures product-wide technical decisions, defaults, and constraints. Use this to align teams and accelerate delivery.

<!-- Auto-generated by BMAD Minimal CLI - modify as needed -->

---

## How to use this document

- Start with Required sections only. You can ship with just these.
- Prefer defaults and LTS versions. Add links to ADRs/RFCs for anything non-default.
- Mark unknowns as "TBD" with an owner and a date.
- Review cadence: quarterly

---

## Basic information (fill these first)

### R1) Languages and runtimes

- Primary language(s) and version(s): ${techInfo.languages}
- Runtime baseline & policy: ${techInfo.runtime}${
		techInfo.runtime !== "TBD" ? " LTS" : ""
	}
- Type/strictness: ${
		techInfo.languages.includes("TypeScript")
			? 'TypeScript "strict": true'
			: "TBD"
	}

---

### R2) Frameworks and libraries

- Frontend: ${
		Array.isArray(techInfo.frameworks) &&
		techInfo.frameworks.includes("React")
			? "React"
			: "TBD"
	}${
		Array.isArray(techInfo.frameworks) &&
		techInfo.frameworks.includes("Next.js")
			? ", Next.js"
			: ""
	}
- Backend: ${getBackendFrameworks(techInfo.frameworks)}
- Testing: TBD
- Build tools: ${getBuildTools(techInfo)}

---

### R3) Project structure and package management

- Repo model: ${projectInfo.hasGit ? "Git repository" : "TBD"}
- Directory layout (high-level): ${config.folders.docs}/, ${
		config.folders.epics
	}/, ${config.folders.stories}/
- Package manager & version: ${techInfo.packageManager}
- Workspaces: TBD

---

### R4) Code quality

- Formatting: ${
		techInfo.languages.includes("TypeScript") ||
		techInfo.languages.includes("JavaScript")
			? "Prettier"
			: "TBD"
	}
- Linting: ${getLintingTools(techInfo.languages)}
- Commit convention: Conventional Commits

---

### R5) API style and versioning

- Style: TBD
- Versioning: TBD
- Error model: TBD

---

### R6) Data and storage

- Primary database: TBD
- ORM/Query layer: TBD
- Migrations: TBD

---

### R7) High-level infrastructure and environments

- Cloud/provider(s): TBD
- Environments: dev, staging, prod
- Secrets management: TBD

---

### R8) Security

- AuthN/AuthZ approach: TBD
- Secrets policy: TBD
- Dependency updates: ${
		techInfo.packageManager !== "N/A" ? "Renovate/Dependabot" : "TBD"
	}

---

### R9) Observability

- Logging: TBD
- Metrics: TBD
- Error tracking: TBD

---

### R10) Testing strategy

- Unit tests: TBD
- Integration/E2E: TBD
- Quality gates: TBD

---

## Advanced information

*The advanced sections (O1-O20) have been preserved from the original template and can be filled as your project grows.*

<!-- For full advanced sections, see the original technical-preferences.md template -->

---

### Project Detection Summary

This file was auto-generated based on your project:
- **Project Type**: ${techInfo.projectType}
- **Languages**: ${techInfo.languages}
- **Runtime**: ${techInfo.runtime}
- **Frameworks**: ${techInfo.frameworks}
- **Package Manager**: ${techInfo.packageManager}
- **Git Repository**: ${techInfo.hasGit ? "Yes" : "No"}

*Modify the sections above as needed for your specific project requirements.*
`;

	await fs.writeFile(
		path.join(bmadCorePath, config.folders.docs, "technical-preferences.md"),
		content
	);
}

async function createAgentFiles(agentsPath, projectInfo) {
	// Create a basic agent configuration
	const agentConfig = {
		name: "bmad-minimal-agent",
		description: "BMAD Minimal workspace agent configuration",
		version: "1.0.0",
		context: {
			project_type: projectInfo.type,
			languages: projectInfo.languages,
			frameworks: projectInfo.frameworks,
		},
		capabilities: ["code-generation", "documentation", "project-analysis"],
	};

	await fs.writeJson(path.join(agentsPath, "config.json"), agentConfig, {
		spaces: 2,
	});

	// Create a simple README for the agents folder
	const agentReadme = `# BMAD Agents

This folder contains agent configurations for your BMAD workspace.

## Files

- \`config.json\` - Main agent configuration
- Add additional agent-specific files as needed

## Usage

This folder is hidden from AI-assisted IDEs to prevent accidental modifications.
Modify agent configurations carefully as they control AI behavior.
`;

	await fs.writeFile(path.join(agentsPath, "README.md"), agentReadme);
}

async function createPlaceholderFiles(bmadCorePath, config) {
	// Create placeholder PRD
	const prdContent = `# Product Requirements Document

*This file was created by BMAD Minimal CLI*

## Overview

Brief description of your product or project.

## Goals and Objectives

- [ ] Goal 1
- [ ] Goal 2
- [ ] Goal 3

## Requirements

### Functional Requirements

1. Requirement 1
2. Requirement 2
3. Requirement 3

### Non-Functional Requirements

1. Performance requirements
2. Security requirements
3. Scalability requirements

## Success Metrics

- Metric 1
- Metric 2
- Metric 3

---

*This document should be updated regularly as requirements evolve.*
`;

	await fs.writeFile(
		path.join(bmadCorePath, config.folders.docs, "prd.md"),
		prdContent
	);

	// Create placeholder Architecture document
	const archContent = `# Architecture Document

*This file was created by BMAD Minimal CLI*

## System Overview

High-level description of your system architecture.

## Components

### Core Components

1. **Component 1**: Description
2. **Component 2**: Description
3. **Component 3**: Description

### External Dependencies

- Dependency 1
- Dependency 2
- Dependency 3

## Data Flow

Describe how data flows through your system.

## Technology Stack

Based on project detection:
- Languages: Auto-detected from your project
- Frameworks: Auto-detected from your project
- Infrastructure: To be defined

## Security Considerations

- Authentication
- Authorization
- Data protection

---

*This document should be updated as the architecture evolves.*
`;

	await fs.writeFile(
		path.join(bmadCorePath, config.folders.docs, "architecture.md"),
		archContent
	);
}

async function createPlanningFiles(planningPath) {
	const planningReadme = `# Planning

This folder is for web-based planning activities.

## Structure

- \`sessions/\` - Planning session notes
- \`roadmaps/\` - Product roadmaps
- \`research/\` - User research and market analysis

## Usage

Use this folder for planning activities that are better suited for web interfaces:
- Complex roadmap planning
- Collaborative brainstorming
- User story mapping
- Market research documentation

The planning folder is excluded from git by default but can be included if desired.
`;

	await fs.writeFile(path.join(planningPath, "README.md"), planningReadme);

	// Create subdirectories
	await fs.ensureDir(path.join(planningPath, "sessions"));
	await fs.ensureDir(path.join(planningPath, "roadmaps"));
	await fs.ensureDir(path.join(planningPath, "research"));
}

function getBackendFrameworks(frameworks) {
	if (!Array.isArray(frameworks)) {
		return "TBD";
	}
	const backend = frameworks.filter((f) =>
		["Express", "Fastify", "NestJS"].includes(f)
	);
	return backend.length > 0 ? backend.join(", ") : "TBD";
}

function getBuildTools(techInfo) {
	if (techInfo.languages.includes("TypeScript")) {
		return "TypeScript compiler, bundler TBD";
	} else if (techInfo.languages.includes("JavaScript")) {
		return "Bundler TBD (Webpack/Vite/Rollup)";
	}
	return "TBD";
}

function getLintingTools(languages) {
	const tools = [];
	if (languages.includes("TypeScript") || languages.includes("JavaScript")) {
		tools.push("ESLint");
	}
	if (languages.includes("Python")) {
		tools.push("flake8/black");
	}
	if (languages.includes("Go")) {
		tools.push("golangci-lint");
	}
	return tools.length > 0 ? tools.join(", ") : "TBD";
}

module.exports = { createTemplateFiles };
