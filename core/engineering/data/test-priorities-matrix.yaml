$schema: ../../../internal/data.schema.json
id: test-priorities-matrix
title: Test Priorities Matrix
version: 1.0.0
description: Guide for prioritizing test scenarios based on risk, criticality, and business impact
type: matrix
category: testing
scope: project
content:
  matrix:
    dimensions:
      - name: priority_level
        values: ["P0", "P1", "P2", "P3"]
      - name: coverage_type
        values: ["unit", "integration", "e2e"]
    priority_levels:
      - level: P0
        name: Critical (Must Test)
        criteria:
          - Revenue-impacting functionality
          - Security-critical paths
          - Data integrity operations
          - Regulatory compliance requirements
          - Previously broken functionality (regression prevention)
        examples:
          - Payment processing
          - Authentication/authorization
          - User data creation/deletion
          - Financial calculations
          - GDPR/privacy compliance
        testing_requirements:
          - Comprehensive coverage at all levels
          - Both happy and unhappy paths
          - Edge cases and error scenarios
        coverage_targets:
          unit: ">90%"
          integration: ">80%"
          e2e: "All critical paths"
      - level: P1
        name: High (Should Test)
        criteria:
          - Core user journeys
          - Frequently used features
          - Features with complex logic
          - Integration points between systems
          - Features affecting user experience
        examples:
          - User registration flow
          - Search functionality
          - Data import/export
          - Notification systems
          - Dashboard displays
        testing_requirements:
          - Primary happy paths required
          - Key error scenarios
          - Critical edge cases
        coverage_targets:
          unit: ">80%"
          integration: ">60%"
          e2e: "Main happy paths"
      - level: P2
        name: Medium (Nice to Test)
        criteria:
          - Secondary features
          - Admin functionality
          - Reporting features
          - Configuration options
          - UI polish and aesthetics
        examples:
          - Admin settings panels
          - Report generation
          - Theme customization
          - Help documentation
          - Analytics tracking
        testing_requirements:
          - Happy path coverage
          - Basic error handling
          - Can defer edge cases
        coverage_targets:
          unit: ">60%"
          integration: ">40%"
          e2e: "Smoke tests"
      - level: P3
        name: Low (Test if Time Permits)
        criteria:
          - Rarely used features
          - Nice-to-have functionality
          - Cosmetic issues
          - Non-critical optimizations
        examples:
          - Advanced preferences
          - Legacy feature support
          - Experimental features
          - Debug utilities
        testing_requirements:
          - Smoke tests only
          - Can rely on manual testing
          - Document known limitations
        coverage_targets:
          unit: "Best effort"
          integration: "Best effort"
          e2e: "Manual only"
    risk_adjustments:
      increase_priority:
        - condition: High user impact
          threshold: "affects >50% of users"
        - condition: High financial impact
          threshold: ">$10K potential loss"
        - condition: Security vulnerability potential
          threshold: null
        - condition: Compliance/legal requirements
          threshold: null
        - condition: Customer-reported issues
          threshold: null
        - condition: Complex implementation
          threshold: ">500 LOC"
        - condition: Multiple system dependencies
          threshold: null
      decrease_priority:
        - Feature flag protected
        - Gradual rollout planned
        - Strong monitoring in place
        - Easy rollback capability
        - Low usage metrics
        - Simple implementation
        - Well-isolated component
    priority_assignment_rules:
      - Start with business impact - What happens if this fails?
      - Consider probability - How likely is failure?
      - Factor in detectability - Would we know if it failed?
      - Account for recoverability - Can we fix it quickly?
    decision_tree:
      root: Is it revenue-critical?
      branches:
        - condition: "YES"
          result: P0
        - condition: "NO"
          next: Does it affect core user journey?
          branches:
            - condition: "YES"
              next: Is it high-risk?
              branches:
                - condition: "YES"
                  result: P0
                - condition: "NO"
                  result: P1
            - condition: "NO"
              next: Is it frequently used?
              branches:
                - condition: "YES"
                  result: P1
                - condition: "NO"
                  next: Is it customer-facing?
                  branches:
                    - condition: "YES"
                      result: P2
                    - condition: "NO"
                      result: P3
    execution_order:
      - priority: P0
        description: Execute first (fail fast on critical issues)
      - priority: P1
        description: Execute second (core functionality)
      - priority: P2
        description: Execute if time permits
      - priority: P3
        description: Only in full regression cycles
    continuous_adjustment_criteria:
      - Production incident patterns
      - User feedback and complaints
      - Usage analytics
      - Test failure history
      - Business priority changes
usage:
  agents: ["qa", "dev", "pdm"]
  phases: ["testing", "planning", "review"]
  tasks: ["test-design", "test-priorities"]
  load_when: on_demand
metadata:
  author: Thien Huynh
  created: "2025-08-21"
  tags: ["testing", "priorities", "risk-assessment", "quality", "matrix"]
