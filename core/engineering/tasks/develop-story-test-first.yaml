$schema: ../../.internal/task.schema.json
id: develop-story-test-first
title: Develop Story (Test-First)
version: 1.0.0
purpose: Following the Test Driven Development (TDD) methodology, implement a WIP story using a test-first workflow. Read the author's Test Specs in the story, write failing tests from those specs, then implement until tests pass.
category: development
agent: dev

inputs:
  required:
    - name: story_id
      type: story_id
      description: Story identifier in format {epic}.{story}
      pattern: "^\\d+\\.\\d+$"
      examples: ["1.3", "2.1", "3.5"]
    - name: story_path
      type: path
      description: Path to story file from docs.subDirs.stories in config.json
      pattern: "{@docs.subDirs.stories}/{epic}.{story}-*.yaml"
    - name: test_command
      type: command
      description: Command for running tests in the project (derived from the project setup if not specified)
      examples: ["npm run test", "go test"]
    - name: build_command
      type: command
      description: Command for executing build step for the project (derived from the project setup if not specified)
      examples: ["npm run build", "cargo build"]
  optional:
    - name: lint_command
      type: command
      description: Command to check for linting errors. Typically in a TypeScript/JavaScript project
      examples: ["npm run lint"]

outputs:
  updates:
    - target: "{story_path}"
      sections:
        - "Dev Agent Record"
        - "Dev Agent Record/Checkboxes"
        - "Dev Agent Record/Debug Log References"
        - "Dev Agent Record/Completion Notes List"
        - "File List"
        - "Change Log"
      restrictions: Only toggle checkboxes and append to allowed sections; do not rename or reorder tasks
  artifacts:
    - name: Test Files
      type: file
      path: "{project_root}/tests/**"
      format: text
      description: Test files created first from the author's specs
    - name: Implementation Files
      type: file
      path: "{project_root}/**"
      format: text
      description: Production code implementing the story

prerequisites:
  files:
    - "{@baseDir}/config.json"
    - "{story_path}"
  status:
    - entity: story
      field: status
      value: "WIP"
      operator: equals

process:
  mode: sequential
  steps:
    - id: LOAD-CONFIG
      title: Load Core Configuration and Story
      description: Load config.json; resolve and read story file
      action:
        type: file_operation
        operation: read
        target: "{@baseDir}/config.json"

    - id: VERIFY-WIP
      title: Verify Story Status is WIP
      description: Halt if story status is not WIP
      action:
        type: validation
        content: |
          If status != WIP -> HALT and notify user
      on_failure: halt

    - id: EXTRACT-SPECS
      title: Extract Test Specs
      description: Find the Test Specs/Test Cases section in the story
      action:
        type: analysis
        target: "{story_path}#test-specs"
        content: |
          - Locate a section named one of: "Test Specs", "Specs", "Test Cases", or similar
          - If not found, HALT and ask the user to add specs or run *spec-review in QA

    - id: WRITE-TESTS
      title: Author Tests From Specs (Red)
      description: Translate specs into runnable tests per project conventions
      action:
        type: file_operation
        operation: create
        content: |
          - For each spec, create a focused test case using Given-When-Then intent
          - Prefer existing frameworks from the repo; follow repo structure/naming
          - Add necessary fixtures/mocks; keep tests deterministic
          - Do not implement production code yet

    - id: RUN-RED
      title: Run Tests (Expect Failures)
      description: Confirm tests fail before implementation
      action:
        type: command
        command: "{test_command}"
      on_success: continue
      on_failure: continue

    - id: IMPLEMENT
      title: Implement Minimal Code to Pass Tests (Green)
      description: Implement production code iteratively until tests pass
      action:
        type: file_operation
        operation: update
        content: |
          - Implement minimal code to satisfy failing tests
          - Keep changes small; iterate until all spec-derived tests pass
          - Update File List with created/modified files

    - id: RUN-GREEN
      title: Run Tests to Green
      description: Ensure the suite passes
      action:
        type: command
        command: "{test_command}"
      retry:
        max_attempts: 3
        delay_seconds: 0

    - id: REFACTOR
      title: Refactor with Safety
      description: Optional refactor while keeping tests green
      action:
        type: analysis
        prompt: |
          - Identify obvious refactors (naming, duplication, small extractions)
          - Keep functional behavior; re-run tests after changes

    - id: COMPLETE
      title: Update Story and Notes
      description: Update allowed Dev Agent Record sections only
      action:
        type: file_operation
        operation: update
        target: "{story_path}"
        content: |
          - Append to Debug Log, Completion Notes, Change Log with concise entries
          - Do not edit non-Dev sections

dependencies:
  tasks:
    - execute-checklist.yaml
  checklists:
    - story-dod-checklist.yaml

blocking_conditions:
  - condition: No Test Specs found in story
    message: Provide Test Specs in the story or run QA *spec-review
    severity: error
  - condition: Tests flaky or non-deterministic
    message: Stabilize tests before proceeding
    severity: error

completion:
  criteria:
    - Spec-derived tests added and passing
    - Minimal implementation complete with tests green
    - Dev Agent Record updated in allowed sections

metadata:
  author: Thien Huynh
  created: 2025-08-23
  lastModified: 2025-08-23
  tags:
    - development
    - test-first
    - tdd
  complexity: moderate
  estimated_duration: 1h-4h

