$schema: ../../../internal/task.schema.json
id: spec-review
title: Spec Review
version: 1.0.0
purpose: Evaluate provided test specifications for completeness, coverage, traceability, and quality against the target story. Produce an immediate, actionable improvement report without creating files.
category: quality
agent: qa

inputs:
  required:
    - name: story_id
      type: story_id
      description: Story identifier in format {epic}.{story}
      pattern: "^\\d+\\.\\d+$"
      examples: ["1.3", "2.5"]
    - name: story_path
      type: path
      description: Path to story file from docs.sub_dirs.stories in config.json
      pattern: "{@docs.sub_dirs.stories}/story-{epic}.{story}-*.yaml"
  optional:
    - name: specs
      type: string
      description: Raw test specifications text. If omitted, the task will try to extract from the story section named "Test Specs", "Specs", or "Test Cases".
    - name: specs_path
      type: path
      description: Optional path to a specs document to review. Used if provided and takes precedence over extracting from the story file.

prerequisites:
  files:
    - "{@resources_dir}/config.json"
    - "{story_path}"
  status:
    - entity: story
      field: status
      value: "Spec Review"
      operator: equals

process:
  mode: sequential
  steps:
    - id: LOAD-CONFIG
      title: Load Configuration and Story
      description: Load core config and resolve the story file referenced by story_id/story_path.
      action:
        type: file_operation
        operation: read
        target: "{@resources_dir}/config.json"
      on_failure: halt

    - id: RESOLVE-SPECS
      title: Resolve Specs Source
      description: Determine the exact specs text to review from inputs or the story file.
      action:
        type: analysis
        content: |
          Resolution order:
          1) Use inputs.specs if provided (raw text)
          2) Else read inputs.specs_path if provided
          3) Else extract from story file sections named one of: "Test Specs", "Specs", or "Test Cases"
          If none found, HALT and request the user to provide specs text or a path.
      on_failure: halt

    - id: WRITE-SPECS
      title: Normalize and Update Test Specs in Story
      description: Normalize the provided specs and write/update them under the story's Test Specs field before analysis.
      action:
        type: file_operation
        operation: update
        target: "{story_path}"
        content: |
          Update the "Test Specs" section as follows:
          - Overwrite or append under the "Specifications" sub-section with a normalized numbered list, each item referencing ACs.
          - Optionally update the "Artifacts" sub-section if the user provided test file references; otherwise leave unchanged.
          - Do not modify any other story sections.
      on_failure: halt

    - id: TRACEABILITY
      title: Traceability to Acceptance Criteria
      description: Map each spec to specific acceptance criteria and requirements; flag untraceable specs.
      action:
        type: analysis
        content: |
          For each spec:
          - Identify the AC number(s) or requirement it validates
          - Mark "untraceable" if no AC/requirement can be linked
          - Summarize a coverage table: spec_id -> [ACs]

    - id: COVERAGE
      title: Coverage Assessment
      description: Check breadth of coverage across functional dimensions.
      action:
        type: analysis
        content: |
          Assess whether specs include:
          - Positive paths and happy flows
          - Negative/error cases and validation failures
          - Edge/boundary values
          - State transitions and lifecycle
          - Multi-step flows and integration seams
          - Concurrency/async considerations (where relevant)
          Output gaps grouped by dimension.

    - id: NFR-RELEVANCE
      title: Non-Functional Considerations
      description: Evaluate whether relevant non-functional aspects are addressed in specs where applicable.
      action:
        type: analysis
        content: |
          Check for NFR-focused specs where appropriate:
          - Performance (code-level critical paths)
          - Security/authz/authn, input validation
          - Accessibility (a11y), i18n/l10n (for UI)
          - Observability/logging, data integrity
          Note missing or mis-scoped NFR specs; NFR depth should be risk-based.

    - id: SPEC-QUALITY
      title: Spec Quality and Testability
      description: Assess clarity and executability of the specs.
      action:
        type: analysis
        content: |
          Validate specs quality:
          - Clear Given-When-Then (or equivalent intent), unambiguous
          - Single assert/intent per scenario where practical
          - Deterministic setup/teardown and environment assumptions
          - Test data defined or referenced
          - Mocks/stubs/fixtures specified where needed
          - Avoid overlapping/over-broad specs

    - id: DEDUP-CONFLICTS
      title: Redundancies and Contradictions
      description: Identify duplicate, overlapping, or conflicting specs and propose consolidation.
      action:
        type: analysis
        content: |
          - List redundant specs and propose de-duplication
          - Flag contradictions and suggest a single reliable source

    - id: PRIORITIZE-GAPS
      title: Prioritize Gaps by Risk
      description: Classify gaps using P0/P1/P2 and propose focused additions.
      action:
        type: analysis
        content: |
          - Classify gaps: P0 (security/revenue-critical), P1 (core flows), P2 (secondary)
          - For each P0 gap, provide 1â€“2 example spec(s) to add (concise)

    - id: REPORT
      title: Produce Actionable Report (Direct Output)
      description: Output a concise, structured report to the console only (no files).
      action:
        type: analysis
        content: |
          Output (numbered list sections):
          1) What's good
          2) Gaps (by dimension and risk)
          3) Ambiguities
          4) Redundancies/Conflicts
          5) Actionable next steps (ordered by risk)

outputs:
  direct_report: true
  updates:
    - target: "{story_path}"
      sections:
        - "Test Specs"
      restrictions: "QA agent may edit only the 'Test Specs' field; do not modify other sections"

blocking_conditions:
  - condition: "Story file not found"
    message: "Story file must exist for spec review"
    severity: critical
  - condition: "Specs not found"
    message: "Provide specs text or add a 'Test Specs' section to the story"
    severity: error

completion:
  criteria:
    - Specs resolved or explicit request issued to user
    - Test Specs field updated in the story
    - Traceability mapping created
    - Coverage gaps identified
    - NFR considerations evaluated (as applicable)
    - Quality and redundancy analysis completed
    - Actionable report produced (direct output)

dependencies:
  schemas:
    - story.json
  data:
    - test-levels-framework.yaml
    - test-priorities-matrix.yaml

metadata:
  author: Thien Huynh
  created: "2025-09-03"
  lastModified: "2025-09-03"
  tags:
    - qa
    - specs
    - review
    - coverage
    - quality
  complexity: moderate
  estimated_duration: "10m-30m"

