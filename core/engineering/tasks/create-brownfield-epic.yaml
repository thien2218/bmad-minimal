$schema: ../../.internal/task.schema.json
id: create-brownfield-epic
title: Create Enhancement Epic from Brownfield Docs
version: 1.0.0
purpose: Create a single epic for the highest-order brownfield enhancement using PRD and Architecture docs in {@docs.subdirs.brownfield} as authoritative references. Output YAML strictly follows the epic schema.
category: planning
agent: pdm

inputs:
  optional:
    - name: epic_enhancement_number
      type: number
      description: Override the detected highest enhancement number (default is auto-detected).
    - name: enhancement_name
      type: string
      description: Optional short kebab-case slug used in the epic filename wildcard.

outputs:
  artifacts:
    - name: Epic File
      type: file
      path: "{@docs.subdirs.epics}/enh-{epic_enhancement_number}-*.yaml"
      format: yaml
      description: Epic document in YAML matching core/engineering/schemas/epic.json

prerequisites:
  files:
    - "{@baseDir}/config.json"
  commands:
    - command: "test -f config.json"
      expected_exit_code: 0

process:
  mode: sequential
  steps:
    - id: CONFIG-1
      title: Load Core Configuration
      description: Load config.json and verify docs paths
      action:
        type: file_operation
        operation: read
        target: "{@baseDir}/config.json"
        validation:
          type: string
          required: true
      on_failure: halt

    - id: DISCOVER-1
      title: Detect Highest Enhancement Number
      description: Determine the highest enhancement number from brownfield docs
      action:
        type: analysis
        content: |
          Inspect {@docs.subdirs.brownfield} for files:
          - prd-enh-*.md
          - architecture-enh-*.md
          Extract all enhancement numbers and compute the maximum value.
          If input epic_enhancement_number is provided, use it instead.

    - id: VALIDATE-1
      title: Validate Epic Non-Existence or Confirm Overwrite
      description: Ensure we do not overwrite an existing epic unintentionally
      action:
        type: validation
        prompt: |
          Check if epic file exists: {@docs.subdirs.epics}/enh-{epic_enhancement_number}-*.yaml
          If it exists, choose:
          1) Skip (do not create)
          2) Overwrite (replace content)
          3) Create new variant with different slug
      elicit: true

    - id: READ-1
      title: Read PRD for Enhancement
      description: Read PRD for the detected enhancement
      action:
        type: file_operation
        operation: read
        target: "{@docs.subdirs.brownfield}/prd-enh-{epic_enhancement_number}.md"
        validation:
          type: string
          required: true

    - id: READ-2
      title: Read Architecture for Enhancement
      description: Read Architecture doc for the detected enhancement
      action:
        type: file_operation
        operation: read
        target: "{@docs.subdirs.brownfield}/architecture-enh-{epic_enhancement_number}.md"
        validation:
          type: string
          required: true

    - id: EXTRACT-1
      title: Extract Epic Inputs from PRD/Architecture
      description: Extract goal, description, DOD, scope boundaries, FR/NFR mappings, and initial story list
      action:
        type: analysis
        content: |
          From PRD:
          - Identify epic goal and high-level description
          - Map Functional Requirements (FRs) and Non-Functional Requirements (NFRs) applicable to the enhancement
          - Propose initial 1–3 story list with brief goals and priorities (1–5)

          From Architecture:
          - Note key integration points and compatibility constraints
          - Gather boundaries to fill in-scope/out-of-scope

    - id: CREATE-1
      title: Create Epic YAML (schema-aligned)
      description: Initialize the epic file following core/engineering/schemas/epic.json sections
      action:
        type: file_operation
        operation: create
        target: "{@docs.subdirs.epics}/enh-{epic_enhancement_number}-{enhancement_name}.yaml"
        content: |
          status: Draft
          epic-overview:
            goal: "{epic_goal}"
            description: |
              {epic_description}
            definition_of_done:
              - "1: End-to-end functionality delivered per PRD"
              - "2: Existing functionality compatibility maintained"
              - "3: Performance/security expectations met"
              - "4: Documentation updated appropriately"
          scope-boundaries:
            in-scope:
              - "{in_scope_item_1}"
              - "{in_scope_item_2}"
            out-of-scope:
              - "{out_of_scope_item_1}"
              - "{out_of_scope_item_2}"
          requirements-mapping:
            functional-requirements:
              - "**{FR id}**: {FR summary} - {implementation_scope}"
            non-functional-requirements:
              - "**{NFR id}**: {NFR summary} - {acceptance_threshold}"
          story-breakdown:
            story-list:
              - "1: **{Story 1 title}** - {Story 1 goal} [Priority: {1-5}]"
              - "2: **{Story 2 title}** - {Story 2 goal} [Priority: {1-5}]"
            story-sequencing-rationale: "{why_this_order}"
          dependencies:
            dependencies:
              - "**{dep_type}**: {dep_description} - {dep_impact}"
            story-dependencies:
              - "Story {story_id} depends on {prereq_story_id}: {reason}"

    - id: VALIDATE-2
      title: Validate Epic Completeness
      description: Ensure required sections are present and consistent
      action:
        type: validation
        content: |
          Confirm presence and basic completeness of:
          - epic-overview (goal, description, definition_of_done)
          - scope-boundaries (in-scope, out-of-scope)
          - requirements-mapping (FRs and NFRs)
          - story-breakdown (story-list and rationale)
          - dependencies

    - id: HANDOFF-1
      title: Provide Summary
      description: Summarize created epic file and next steps
      action:
        type: elicit
        prompt: |
          Epic created: {@docs.subdirs.epics}/enh-{epic_enhancement_number}-*.yaml
          Status: Draft
          Stories proposed: {story_count}
          Next: Review story list and priorities, then proceed to story creation.

dependencies:
  schemas:
    - epic.json
  checklists:
    - pd-master-checklist.yaml

blocking_conditions:
  - condition: "PRD or Architecture file for detected enhancement not found"
    message: "Missing brownfield docs (prd-enh/architecture-enh). Cannot derive epic."
    severity: critical

completion:
  criteria:
    - Epic file created with Status Draft
    - Sections present per epic schema
    - Story list proposed with priorities

metadata:
  author: Thien Huynh
  created: 2025-09-05
  lastModified: 2025-09-05
  tags:
    - brownfield
    - epic
    - planning
  complexity: moderate
  estimated_duration: 30m-45m

