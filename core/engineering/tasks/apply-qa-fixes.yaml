$schema: ../../.internal/task.schema.json
id: apply-qa-fixes
title: Apply QA Fixes
version: 1.0.0
purpose: Implement fixes based on QA results (gate and assessments) for a specific story while only updating allowed sections in the story file
category: quality
agent: dev

inputs:
  required:
    - name: story_id
      type: story_id
      description: Story identifier in format {epic}.{story}
      pattern: "^\\d+\\.\\d+$"
      examples: ["2.2", "1.3", "3.1"]
    - name: qa_root
      type: path
      description: QA artifacts location from {@base_dir}/config.json docs.sub_dirs.qa
      default: "{@docs.sub_dirs.qa}"
    - name: story_root
      type: path
      description: Story files location from {@base_dir}/config.json docs.sub_dirs.stories
      default: "{@docs.sub_dirs.stories}"
    - name: test_command
      type: command
      description: Command for running tests in the project (derived from the project setup if not specified)
      examples: ["npm run test", "go test"]
  optional:
    - name: lint_command
      type: command
      description: Command to check for linting errors. Typically in a TypeScript/JavaScript project
      examples: ["npm run lint"]
    - name: story_title
      type: string
      description: Story title - derived from story H1 if missing
    - name: story_slug
      type: string
      description: Story slug - derived from title (lowercase, hyphenated) if missing
      pattern: "^[a-z0-9-]+$"

outputs:
  updates:
    - target: "{story_root}/{story_id}-*.yaml"
      sections:
        - "Tasks / Subtasks Checkboxes"
        - "Dev Agent Record"
        - "Change Log"
        - "Status"
      restrictions: Dev agent is ONLY authorized to update these sections

prerequisites:
  files:
    - "{@base_dir}/config.json"
  status:
    - entity: story
      field: status
      value: "Ready for QA"
      operator: in

process:
  mode: sequential
  steps:
    - id: LOAD-CONFIG
      title: Load Core Config & Locate Story
      description: Read core config and resolve qa_root and story_root paths
      action:
        type: file_operation
        operation: read
        target: "{@base_dir}/config.json"
      on_failure: halt

    - id: LOCATE-STORY
      title: Locate Story File
      description: Find story file in {story_root}/story-{epic}.{story}-*.yaml
      action:
        type: validation
        validation:
          type: string
          pattern: ".*\\.yaml$"
          required: true
      on_failure: halt

    - id: COLLECT-QA
      title: Collect QA Findings
      description: Parse gate YAML and read assessment markdowns
      action:
        type: analysis
        prompt: |
          Parse the latest gate YAML:
          - gate (PASS|CONCERNS|FAIL|WAIVED)
          - top_issues[] with id, severity, finding, suggested_action
          - nfr_validation.*.status and notes
          - trace coverage summary/gaps
          - test_design.coverage_gaps[]
          - risk_summary.recommendations.must_fix[] (if present)
          
          Read assessment markdowns and extract explicit gaps/recommendations

    - id: BUILD-FIX-PLAN
      title: Build Deterministic Fix Plan
      description: Create prioritized fix plan based on QA findings
      action:
        type: analysis
        prompt: |
          Apply in order, highest priority first:
          1. High severity items in top_issues (security/perf/reliability/maintainability)
          2. NFR statuses: all FAIL must be fixed → then CONCERNS
          3. Test Design coverage_gaps (prioritize P0 scenarios if specified)
          4. Trace uncovered requirements (AC-level)
          5. Risk must_fix recommendations
          6. Medium severity issues, then low
          
          Guidance:
          - Prefer tests closing coverage gaps before/with code changes
          - Keep changes minimal and targeted; follow project architecture and TS/Deno rules

    - id: APPLY-CHANGES
      title: Apply Code and Test Changes
      description: Implement fixes according to the prioritized plan
      action:
        type: file_operation
        operation: update
        content: |
          - Implement code fixes per plan
          - Add missing tests to close coverage gaps (unit first; integration where required by AC)
          - Keep imports centralized via deps.ts
          - Follow DI boundaries in src/core/di.ts and existing patterns

    - id: VALIDATE-LINT
      title: Validate with Linting
      description: Run lint command and fix any issues
      action:
        type: command
        command: "{lint_command}"
      retry:
        max_attempts: 3
        delay_seconds: 1

    - id: VALIDATE-TESTS
      title: Validate with Tests
      description: Run all tests and ensure they pass
      action:
        type: command
        command: "{test_command}"
      retry:
        max_attempts: 3
        delay_seconds: 2

    - id: UPDATE-STORY
      title: Update Story File (Allowed Sections Only)
      description: Update only the sections Dev agent is authorized to modify
      action:
        type: file_operation
        operation: update
        target: "{story_root}/{story_id}-*.yaml"
        content: |
          Update ONLY these sections:
          - Tasks / Subtasks Checkboxes (mark any fix subtask as done)
          - Dev Agent Record:
            - Agent Model Used (if changed)
            - Debug Log References (commands/results, e.g., lint/tests)
            - Completion Notes List (what changed, why, how)
            - File List (all added/modified/deleted files)
          - Change Log (new dated entry describing applied fixes)
          - Status (apply Status Rule)
          
          Status Rule:
          - If gate was PASS and all identified gaps are closed → set Status: Ready for Done
          - Otherwise → set Status: Ready for Review and notify QA to re-run the review

    - id: COMPLETE
      title: Complete Fix Application
      description: Finalize the fix process - do not edit gate files
      action:
        type: validation
        prompt: Dev does not modify gate YAML. If fixes address issues, request QA to re-run review-story to update the gate

dependencies:
  data:
    - test-priorities-matrix.yaml
    - test-levels-framework.yaml

blocking_conditions:
  - condition: "Missing {@base_dir}/config.json"
    message: Core configuration file not found
    severity: critical
  - condition: "Story file not found for story_id"
    message: Cannot locate story file in specified location
    severity: critical
  - condition: "No QA artifacts found"
    message: Neither gate nor assessments found - request QA to generate at least a gate file
    severity: error

completion:
  criteria:
    - "linting shows 0 problems"
    - "all test cases pass"
    - "All high severity top_issues addressed"
    - "NFR FAIL issues resolved; CONCERNS minimized or documented"
    - "Coverage gaps closed or explicitly documented with rationale"
    - "Story updated (allowed sections only) including File List and Change Log"
    - "Status set according to Status Rule"
  validations:
    - command: "{lint_command}"
      expected_output: "Checked.*files.*problems"
    - command: "{test_command}"
      expected_output: "ok.*passed"

metadata:
  author: Thien Huynh
  created: 2024-01-01
  lastModified: 2024-01-01
  tags:
    - qa
    - fixes
    - testing
    - development
    - story
  complexity: complex
  estimated_duration: 1h-3h
