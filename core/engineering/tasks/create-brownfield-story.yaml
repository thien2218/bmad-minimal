$schema: ../../.internal/task.schema.json
id: create-brownfield-story
title: Create Brownfield Enhancement Story from Highest Brownfield Epic
version: 1.0.0
purpose: Create one story for the highest-order brownfield enhancement epic, referencing its epic YAML and the corresponding PRD/Architecture docs. Output YAML strictly follows the story schema.
category: planning
agent: pdm

inputs:
  optional:
    - name: epic_enhancement_number
      type: number
      description: Override detected highest enhancement epic number (default auto-detected from {@docs.subdirs.epics}).
    - name: story_enhancement_number
      type: number
      description: Override next story number within the selected enhancement epic (default auto-increment from existing stories).
    - name: story_slug
      type: string
      description: Optional short kebab-case slug used in the story filename wildcard.

outputs:
  artifacts:
    - name: Story File
      type: file
      path: "{@docs.subdirs.stories}/enh-{epic_enhancement_number}.{story_enhancement_number}-*.yaml"
      format: yaml
      description: Story document in YAML matching core/engineering/schemas/story.json
  updates:
    - target: "{@docs.subdirs.stories}/*.yaml"
      sections: ["Status", "Dev Notes", "Tasks / Subtasks"]
      restrictions: Only create new story, do not modify existing stories

prerequisites:
  files:
    - "{@baseDir}/config.json"
  commands:
    - command: "test -f config.json"
      expected_exit_code: 0

process:
  mode: sequential
  steps:
    - id: CONFIG-1
      title: Load Core Configuration
      description: Load config.json and verify docs paths
      action:
        type: file_operation
        operation: read
        target: "{@baseDir}/config.json"
        validation:
          type: string
          required: true
      on_failure: halt

    - id: IDENTIFY-1
      title: Locate Highest Enhancement Epic
      description: Determine highest enhancement epic from {@docs.subdirs.epics}
      action:
        type: analysis
        content: |
          Scan {@docs.subdirs.epics} for epic files: enh-*.yaml
          Extract enhancement numbers and select the maximum value.
          If input epic_enhancement_number provided, use it instead.

    - id: IDENTIFY-2
      title: Determine Next Story Number
      description: Determine next sequential story number within the enhancement epic
      action:
        type: analysis
        content: |
          Scan {@docs.subdirs.stories} for files: enh-{epic_enhancement_number}.*-*.yaml
          Extract existing story numbers and compute next (start at 1 if none exist).
          If input story_enhancement_number provided, use it instead.

    - id: VERIFY-1
      title: Check Previous Story Completion (if any)
      description: Warn if previous story exists and is not Done
      action:
        type: validation
        prompt: |
          If previous story exists and status != 'Done':
          ALERT: Found incomplete story!
          File: enh-{epic_enhancement_number}.{last_story_num}-*.yaml
          Status: {current_status}

          You should finish this story first. Proceed to create the next story in Draft anyway?
      elicit: true

    - id: READ-EPIC
      title: Read Epic YAML
      description: Extract story-level requirements from the epic file
      action:
        type: file_operation
        operation: read
        target: "{@docs.subdirs.epics}/enh-{epic_enhancement_number}-*.yaml"
        content: |
          Extract from epic:
          - Initial story title/goal candidates (story-breakdown.story-list)
          - Acceptance criteria references and priorities
          - Dependencies (if any)

    - id: READ-BROWNFIELD-DOCS
      title: Read PRD and Architecture for Enhancement
      description: Extract technical context from brownfield docs
      action:
        type: file_operation
        operation: read
        content: |
          Read:
          - {@docs.subdirs.brownfield}/prd-enh-{epic_enhancement_number}.md
          - {@docs.subdirs.brownfield}/architecture-enh-{epic_enhancement_number}.md

    - id: EXTRACT-TECH
      title: Extract Technical Details for Story
      description: Extract ONLY relevant technical context to guide implementation
      action:
        type: analysis
        content: |
          Extract strictly from docs (do NOT invent):
          - Data models or schemas relevant to this story
          - API endpoints and contracts
          - Component specifications (for UI)
          - File paths and naming conventions
          - Testing requirements
          - Security/performance considerations
          Include doc references where applicable.

    - id: CREATE-1
      title: Create Story YAML (schema-aligned)
      description: Initialize story file following core/engineering/schemas/story.json sections
      action:
        type: file_operation
        operation: create
        target: "{@docs.subdirs.stories}/enh-{epic_enhancement_number}.{story_enhancement_number}-{story_slug}.yaml"
        content: |
          story:
            id: "enh-{epic_enhancement_number}.{story_enhancement_number}"
            title: "{story_title}"
            status: Draft
            priority: "{priority}"
            statement: "As a {user_role}, I want {specific_action}, so that {benefit}."
          acceptance_criteria:
            - "{AC 1}"
            - "{AC 2}"
          dev_notes:
            policy: "This section MUST contain ONLY information extracted from PRD/Architecture. NEVER invent technical details."
            doc_impact_summary: "{Updated PRD sections: ..., Architecture: ... | No updates needed}"
            testing_standards:
              - "{test standard 1}"
            previous_story_insights: "{prior insights if any}"
            data_models:
              value: "{data models used}"
              source: "{@docs.subdirs.brownfield}/architecture-enh-{epic_enhancement_number}.md#{section}"
            api_specifications:
              value: "{API specs}"
              source: "{@docs.subdirs.brownfield}/architecture-enh-{epic_enhancement_number}.md#{section}"
            component_specifications:
              value: "{component specs}"
              source: "{@docs.subdirs.brownfield}/architecture-enh-{epic_enhancement_number}.md#{section}"
            file_locations:
              value: "{file paths and naming conventions}"
              source: "{@docs.subdirs.brownfield}/architecture-enh-{epic_enhancement_number}.md#{section}"
            testing_requirements:
              value: "{testing requirements}"
              source: "{@docs.subdirs.brownfield}/architecture-enh-{epic_enhancement_number}.md#{section}"
            technical_constraints:
              value: "{constraints}"
              source: "{@docs.subdirs.brownfield}/architecture-enh-{epic_enhancement_number}.md#{section}"
            notes_missing_guidance: "If information for a category is not found, state: 'No specific guidance found in docs'"
          test_specs:
            specs:
              - "1: [AC 1] Given ..., When ..., Then ..."
            artifacts:
              - path: "{path/to/test}"
                purpose: "{purpose}"
          risk_mitigation:
            primary_risk: "{primary_risk}"
            mitigation_strategies:
              - "{strategy 1}"
            rollback_plan: "{rollback_plan}"
          change_log:
            - date: "{YYYY-MM-DD}"
              version: "{v0.1}"
              description: "Initial draft"
              author: "{name}"
          developer_record:
            agent_model: "{agent_model_name_version}"
            debug_log_references: []
            completion_notes: []
            file_list: []
          qa_results: ""

    - id: CHECKLIST-1
      title: Execute Story Draft Checklist
      description: Run story draft checklist for quality assurance
      action:
        type: subtask
        subtask: execute-checklist
        target: "{@baseDir}/engineering/checklists/story-draft-checklist.yaml"

    - id: HANDOFF-1
      title: Provide Summary and Next Steps
      description: Communicate story creation results
      action:
        type: elicit
        prompt: |
          Story created: {@docs.subdirs.stories}/enh-{epic_enhancement_number}.{story_enhancement_number}-*.yaml
          Status: Draft

          Checklist Results:
          {checklist_results}

          Next steps:
          - Review draft story and approve
          - Proceed to implementation when ready

dependencies:
  schemas:
    - story.json
  tasks:
    - execute-checklist.yaml
  checklists:
    - story-draft-checklist.yaml

blocking_conditions:
  - condition: "No enhancement epic found in {@docs.subdirs.epics}"
    message: "Cannot create a story without an enhancement epic."
    severity: critical

completion:
  criteria:
    - Story YAML created with Status Draft
    - Story content aligned with epic and brownfield PRD/Architecture
    - Checklist executed

metadata:
  author: Thien Huynh
  created: 2025-09-05
  lastModified: 2025-09-05
  tags:
    - brownfield
    - story
    - planning
  complexity: moderate
  estimated_duration: 30m-45m
