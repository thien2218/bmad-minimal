$schema: ../../../internal/task.schema.json
id: create-next-story
title: Create Next Story Task
version: 1.0.0
purpose: Identify the next logical story based on project progress and epic definitions, then prepare a comprehensive, self-contained story file ready for implementation
category: planning
agent: pdm

inputs:
  optional:
    - name: epic
      type: number
      description: Specific epic number to create story for
      examples: [1, 2, 3]
    - name: story
      type: number
      description: Specific story number within epic (derived from incrementing the highest order of previous story of the same epic if not specified)
      examples: [1, 2, 3]

outputs:
  artifacts:
    - name: Story File
      type: file
      path: "{config.storiesLocation}/story-{epic}.{story}-*.yaml"
      format: yaml
      description: Complete story ready for development with full technical context
  updates:
    - target: "{config.storiesLocation}/*.yaml"
      sections: ["Status", "Dev Notes", "Tasks / Subtasks"]
      restrictions: Only create new story, do not modify existing stories

prerequisites:
  files:
    - "{config.root}/config.json"
    - "{config.prd.shardedLocation}/**"
    - "{config.architecture.shardedLocation}/**"
  commands:
    - command: "test -f config.json"
      expected_exit_code: 0

process:
  mode: sequential
  steps:
    - id: CONFIG-1
      title: Load Core Configuration
      description: Load config.json and extract key configurations
      action:
        type: file_operation
        operation: read
        target: "{config.root}/config.json"
        validation:
          type: string
          required: true
      on_failure: halt

    - id: CONFIG-2
      title: Validate Configuration
      description: Ensure required configuration exists
      action:
        type: validation
        content: |
          Extract and validate:
          - storiesLocation
          - prd.* settings
          - architecture.* settings
          - workflow.* settings
          
          If config.json not found:
          HALT with message: "config.json not found. This file is required for story creation."
      condition:
        if: "config_missing"
        then: "HALT"

    - id: IDENTIFY-1
      title: Locate Epic Files and Review Existing Stories
      description: Find epic files based on prdSharded configuration
      action:
        type: analysis
        content: |
          Based on prdSharded from config:
          - Locate epic files (sharded location/pattern or monolithic PRD sections)
          - If storiesLocation has story files, load highest story-{epic}.{story}-*.yaml
          - Determine next sequential story

    - id: IDENTIFY-2
      title: Verify Story Status
      description: Check if previous story is complete
      action:
        type: validation
        prompt: |
          If highest story exists and status != 'Done':
          ALERT: Found incomplete story!
          File: {lastEpicNum}.{lastStoryNum}-*.yaml
          Status: {current_status}
          
          You should fix this story first, but would you like to accept risk & override to create the next story in draft?
      condition:
        if: "last_story_status != 'Done'"
      elicit: true

    - id: IDENTIFY-3
      title: Handle Epic Completion
      description: Check if current epic is complete
      action:
        type: elicit
        prompt: |
          Epic {epic} Complete: All stories in Epic {epic} have been completed.
          
          Would you like to:
          1) Begin Epic {epic + 1} with story 1
          2) Select a specific story to work on
          3) Cancel story creation
          
          CRITICAL: NEVER automatically skip to another epic. User MUST explicitly instruct which story to create.
      condition:
        if: "epic_complete == true"
      elicit: true

    - id: ANNOUNCE-1
      title: Announce Identified Story
      description: Inform user of the next story to be created
      action:
        type: elicit
        prompt: |
          Identified next story for preparation: {epic}.{story} - {Story Title}

    - id: GATHER-1
      title: Gather Story Requirements
      description: Extract story requirements from epic file
      action:
        type: file_operation
        operation: read
        target: "{config.epicsLocation}/epic-{epic}-*.yaml"
        content: |
          Extract:
          - Story title and description
          - Acceptance criteria
          - Priority
          - Dependencies

    - id: GATHER-2
      title: Review Previous Story Context
      description: If previous story exists, extract lessons learned
      action:
        type: analysis
        target: "{config.storiesLocation}/{previousEpicNum}.{previousStoryNum}-*.yaml"
        content: |
          Review Dev Agent Record sections for:
          - Completion Notes and Debug Log References
          - Implementation deviations and technical decisions
          - Challenges encountered and lessons learned
          
          Extract relevant insights for current story
      condition:
        if: "previous_story_exists == true"

    - id: ARCH-1
      title: Determine Architecture Reading Strategy
      description: Select architecture documents based on configuration
      action:
        type: decision
        content: |
          Read {config.architecture.shardedLocation}/*.md
          Follow structured reading order

    - id: ARCH-2
      title: Read Architecture Documents
      description: Read relevant architecture documents based on story type
      action:
        type: file_operation
        operation: read
        content: |
          For ALL Stories:
          - tech-stack.md
          - unified-project-structure.md
          - coding-standards.md
          - testing-strategy.md
          
          For Backend/API Stories, additionally:
          - data-models.md
          - database-schema.md
          - backend-architecture.md
          - rest-api-spec.md
          - external-apis.md
          
          For Frontend/UI Stories, additionally:
          - frontend-architecture.md
          - components.md
          - core-workflows.md
          - data-models.md
          
          For Full-Stack Stories:
          - Read both Backend and Frontend sections

    - id: ARCH-3
      title: Extract Story-Specific Technical Details
      description: Extract ONLY relevant information for current story
      action:
        type: analysis
        content: |
          Extract ONLY information directly relevant to implementing the current story.
          Do NOT invent new libraries, patterns, or standards not in source documents.
          
          Extract:
          - Specific data models, schemas, or structures the story will use
          - API endpoints the story must implement or consume
          - Component specifications for UI elements in the story
          - File paths and naming conventions for new code
          - Testing requirements specific to the story's features
          - Security or performance considerations affecting the story
          
          ALWAYS cite source: [Source: architecture/<filename>.md#{section}]

    - id: STRUCTURE-1
      title: Verify Project Structure Alignment
      description: Cross-reference with Project Structure Guide
      action:
        type: validation
        target: "{config.architecture.shardedLocation}/unified-project-structure.md"
        content: |
          - Cross-reference story requirements with Project Structure Guide
          - Ensure file paths, component locations, module names align
          - Document any structural conflicts in "Project Structure Notes"

    - id: CREATE-1
      title: Create Story File
      description: Populate story template with full context
      action:
        type: file_operation
        operation: create
        target: "{config.storiesLocation}/story-{epic}.{story}-*.yaml"
        content: |
          story:
            id: "{epic}.{story}"
            title: "{Title}"
            status: Draft
            priority: "{priority}"
            statement: "{story_statement}"
          acceptance_criteria: "{acceptance_criteria}"
          dev_notes:
            policy: "This section MUST contain ONLY information extracted from architecture documents. NEVER invent or assume technical details."
            previous_story_insights: "{previous_insights}"
            data_models:
              value: "{data_models}"
              source: "architecture/<filename>.md#{section}"
            api_specifications:
              value: "{api_specs}"
              source: "architecture/<filename>.md#{section}"
            component_specifications:
              value: "{component_specs}"
              source: "architecture/<filename>.md#{section}"
            file_locations:
              value: "{file_locations}"
              source: "architecture/<filename>.md#{section}"
            testing_requirements:
              value: "{testing_requirements}"
              source: "architecture/<filename>.md#{section}"
            technical_constraints:
              value: "{technical_constraints}"
              source: "architecture/<filename>.md#{section}"
            notes_missing_guidance: "If information for a category is not found in architecture docs, explicitly state: 'No specific guidance found in architecture docs'"
          tasks_subtasks: "{generated_tasks}"
          risk_mitigation:
            primary_risk: "{primary_risk}"
            mitigation_strategies: "{mitigation_strategies}"
            rollback_plan: "{rollback_plan}"
          project_structure_notes: "{structure_notes}"

    - id: RISK-1
      title: Assess Story Risk
      description: Evaluate risks specific to this story implementation
      action:
        type: analysis
        content: |
          Assess story-specific risks:
          - Impact on existing functionality
          - Technical complexity and unknowns
          - Integration challenges
          - Data migration or schema changes
          - Performance implications
          - Security considerations
          
          Define:
          - Primary risk for this story
          - Concrete mitigation strategies
          - Rollback plan if implementation fails

    - id: TASKS-1
      title: Generate Tasks and Subtasks
      description: Create detailed technical tasks based on requirements
      action:
        type: analysis
        content: |
          Generate detailed, sequential list of technical tasks based ONLY on:
          - Epic Requirements
          - Story AC
          - Reviewed Architecture Information
          
          Each task must:
          - Reference relevant architecture documentation
          - Include unit testing as explicit subtasks
          - Assign Difficulty (1-10) reflecting complexity and uncertainty
          - Link to ACs where applicable (e.g., Task 1 (AC: 1, 3))

    - id: FINALIZE-1
      title: Review and Complete Story Draft
      description: Final review and status setting
      action:
        type: validation
        content: |
          - Review all sections for completeness and accuracy
          - Verify all source references are included for technical details
          - Ensure tasks align with both epic requirements and architecture constraints
          - Set Status to "Draft"
          - Save the story file

    - id: CHECKLIST-1
      title: Execute Story Draft Checklist
      description: Run story draft checklist for quality assurance
      action:
        type: subtask
        subtask: execute-checklist
        target: "{config.root}/checklists/story-draft-checklist"

    - id: HANDOFF-1
      title: Provide Summary and Next Steps
      description: Communicate story creation results to user
      action:
        type: elicit
        prompt: |
          Story created: {config.storiesLocation}/story-{epic}.{story}-*.yaml
          Status: Draft
          
          Key technical components included from architecture docs:
          {component_summary}
          
          Any deviations or conflicts noted:
          {conflicts}
          
          Checklist Results:
          {checklist_results}
          
          Next steps:
          For Complex stories, suggest the user carefully review the story draft
          and optionally have the PDM run the task: validate-next-story

dependencies:
  tasks:
    - execute-checklist.yaml
    - validate-next-story.yaml
  checklists:
    - story-draft-checklist.yaml
  schemas:
    - story.json

blocking_conditions:
  - condition: config.json not found
    message: This file is required for story creation. Copy from bmad-core or run BMad installer
    severity: critical
  - condition: No epic files found
    message: Cannot create story without epic definitions
    severity: critical
  - condition: Architecture documents missing
    message: Cannot provide technical context without architecture documentation
    severity: error

completion:
  checklist: story-draft-checklist
  criteria:
    - Story file created with status Draft
    - All technical context extracted from architecture
    - Source references included for all technical details
    - Tasks aligned with requirements and architecture
    - Checklist executed successfully

metadata:
  author: Thien Huynh
  created: 2024-01-01
  lastModified: 2024-01-01
  tags:
    - story-creation
    - planning
    - requirements
    - architecture
  complexity: complex
  estimated_duration: 60m
