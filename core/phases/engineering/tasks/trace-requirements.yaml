$schema: ../../../internal/task.schema.json
id: trace-requirements
title: Trace Requirements
version: 1.0.0
purpose: Map story requirements to test cases using Given-When-Then patterns for comprehensive traceability. Given-When-Then is used for documenting the mapping between requirements and tests, NOT for writing actual test code.
category: quality
agent: qa

inputs:
  required:
    - name: story_id
      type: story_id
      description: Story identifier in format {epic}.{story}
      pattern: "^\\d+\\.\\d+$"
      examples: ["1.3", "2.5"]
    - name: story_path
      type: path
      description: Path to story file
      examples: ["docs/stories/{epic}.{story}.*.md"]

prerequisites:
  files:
    - "{story_path}"

process:
  mode: sequential
  steps:
    - id: EXTRACT-REQ
      title: Extract Requirements
      description: Identify all testable requirements from story
      action:
        type: analysis
        prompt: |
          Identify testable requirements from:
          - Acceptance Criteria (primary source)
          - User story statement
          - Tasks/subtasks with specific behaviors
          - Non-functional requirements mentioned
          - Edge cases documented

    - id: MAP-TESTS
      title: Map to Test Cases
      description: Document which tests validate each requirement
      action:
        type: analysis
        prompt: |
          For each requirement, document test mappings using Given-When-Then
          to describe WHAT the test validates (not HOW it's coded):
          
          requirement: AC description
          test_mappings:
            - test_file: path to test file
              test_case: test case name
              given: Initial context the test sets up
              when: Action the test performs
              then: What the test asserts
              coverage: full|partial|integration|unit

    - id: ANALYZE-COVERAGE
      title: Coverage Analysis
      description: Evaluate coverage level for each requirement
      action:
        type: analysis
        prompt: |
          Evaluate coverage for each requirement:
          - full: Requirement completely tested
          - partial: Some aspects tested, gaps exist
          - none: No test coverage found
          - integration: Covered in integration/e2e tests only
          - unit: Covered in unit tests only

    - id: IDENTIFY-GAPS
      title: Gap Identification
      description: Document any coverage gaps found
      action:
        type: analysis
        prompt: |
          Document coverage gaps:
          - requirement: AC or requirement description
          - gap: What is not tested
          - severity: high|medium|low
          - suggested_test:
              type: unit|integration|e2e|performance
              description: What test should be added

    - id: CREATE-GATE-BLOCK
      title: Generate Gate YAML Block
      description: Create trace block for quality gate
      action:
        type: file_operation
        operation: create
        target: "trace_block.yaml"
        content: |
          trace:
            totals:
              requirements: X
              full: Y
              partial: Z
              none: W
            planning_ref: "{qa.qaLocation}/assessments/{epic}.{story}-test-design-{YYYYMMDD}.md"
            uncovered:
              - ac: "AC3"
                reason: "No test found for specific condition"
            notes: "See {qa.qaLocation}/assessments/{epic}.{story}-trace-{YYYYMMDD}.md"

    - id: CREATE-REPORT
      title: Create Traceability Report
      description: Generate comprehensive traceability matrix
      action:
        type: file_operation
        operation: create
        target: "{qa.qaLocation}/assessments/{epic}.{story}-trace-{YYYYMMDD}.md"
        content: |
          # Requirements Traceability Matrix
          
          ## Story: {epic}.{story} - {title}
          
          ### Coverage Summary
          
          - Total Requirements: X
          - Fully Covered: Y (Z%)
          - Partially Covered: A (B%)
          - Not Covered: C (D%)
          
          ### Requirement Mappings
          
          #### AC1: {Acceptance Criterion 1}
          
          **Coverage: FULL**
          
          Given-When-Then Mappings:
          
          - **Unit Test**: `auth.service.test.ts::validateCredentials`
            - Given: Valid user credentials
            - When: Validation method called
            - Then: Returns true with user object
          
          - **Integration Test**: `auth.integration.test.ts::loginFlow`
            - Given: User with valid account
            - When: Login API called
            - Then: JWT token returned and session created
          
          ### Critical Gaps
          
          1. **Performance Requirements**
             - Gap: No load testing for concurrent users
             - Risk: High - Could fail under production load
             - Action: Implement load tests using k6 or similar
          
          2. **Security Requirements**
             - Gap: Rate limiting not tested
             - Risk: Medium - Potential DoS vulnerability
             - Action: Add rate limit tests to integration suite
          
          ### Test Design Recommendations
          
          Based on gaps identified:
          1. Additional test scenarios needed
          2. Test types to implement
          3. Test data requirements
          4. Mock/stub strategies
          
          ### Risk Assessment
          
          - **High Risk**: Requirements with no coverage
          - **Medium Risk**: Requirements with only partial coverage
          - **Low Risk**: Requirements with full unit + integration coverage

    - id: PRINT-REFERENCE
      title: Print Story Hook Line
      description: Output reference for review task
      action:
        type: analysis
        prompt: |
          Print:
          Trace matrix: {qa.qaLocation}/assessments/{epic}.{story}-trace-{YYYYMMDD}.md

outputs:
  artifacts:
    - name: traceability_report
      type: report
      path: "{qa.qaLocation}/assessments/{epic}.{story}-trace-{YYYYMMDD}.md"
      format: markdown
      description: Requirements traceability matrix report
    - name: gate_trace_block
      type: file
      path: "trace_block.yaml"
      format: yaml
      description: Trace block for gate file

dependencies:
  tasks:
    - test-design

completion:
  criteria:
    - Every requirement assessed for coverage
    - Test mappings documented with Given-When-Then
    - Coverage gaps identified
    - Risk assessment completed
    - Recommendations provided
  validations:
    - command: "test -f {qa.qaLocation}/assessments/{epic}.{story}-trace-{YYYYMMDD}.md"
      expected_output: "file exists"

metadata:
  author: BMAD Core Team
  created: "2024-01-01"
  lastModified: "2024-01-01"
  tags:
    - testing
    - traceability
    - requirements
    - quality
  complexity: moderate
  estimated_duration: "20m-45m"
