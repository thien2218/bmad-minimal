$schema: ../../../schemas/task.schema.json
id: develop-story
title: Develop Story Task
version: 1.0.0
purpose: Implement an Approved story end-to-end using test-driven development (TDD), following the story's Tasks/Subtasks with formal workflow

category: development
agent: dev

inputs:
  required:
    - name: story_id
      type: story_id
      description: Story identifier in format epic.story
      pattern: "^\\d+\\.\\d+$"
      examples: ["1.3", "2.1", "3.5"]
    - name: story_path
      type: path
      description: Path to story file from devStoryLocation in core-config.yaml
      examples: ["stories/1.3.story.md", "dev/stories/2.1.story.md"]

outputs:
  updates:
    - target: "{story_path}"
      sections: 
        - "Tasks / Subtasks Checkboxes"
        - "Dev Agent Record"
        - "Dev Agent Record/Checkboxes"
        - "Dev Agent Record/Debug Log References"
        - "Dev Agent Record/Completion Notes List"
        - "File List"
        - "Change Log"
        - "Status"
        - "Agent Model Used"
      restrictions: Only toggle checkboxes and add to allowed sections, do not rename or reorder tasks
  artifacts:
    - name: Test Files
      type: file
      path: "{project_root}/tests/**"
      format: text
      description: Test files created following TDD approach
    - name: Implementation Files
      type: file
      path: "{project_root}/**"
      format: text
      description: Production code implementing the story

prerequisites:
  files:
    - ".bmad-core/core-config.yaml"
    - "{story_path}"
  status:
    - entity: story
      field: status
      value: "WIP"
      operator: equals

process:
  mode: sequential
  steps:
    - id: LOAD-1
      title: Load Core Configuration and Inputs
      description: Load core-config.yaml and resolve story file
      action:
        type: file_operation
        operation: read
        target: ".bmad-core/core-config.yaml"
        content: |
          Extract key configurations:
          - devStoryLocation
          - qa.* settings
          - workflow.* settings
          
          Resolve and load target story using story_id and story_path

    - id: CHECK-1
      title: Check Story Status
      description: Verify story status is WIP
      action:
        type: validation
        content: |
          If status is not WIP:
          HALT and inform user why execution cannot proceed
      on_failure: halt

    - id: TASK-1
      title: Read First or Next Task
      description: Select next incomplete task/subtask
      action:
        type: analysis
        target: "{story_path}#tasks-subtasks"
        content: |
          - Parse the story's "Tasks / Subtasks" list
          - Select the first incomplete task/subtask in order
          - Output: Selected task/subtask to work on

    - id: TEST-DESC-1
      title: Write Test Case Descriptions
      description: Document test cases for selected task
      action:
        type: file_operation
        operation: update
        target: "{story_path}"
        content: |
          For the selected task/subtask:
          - Write clear test case descriptions specifying expected logic and observable outcomes
          - Prefer Given-When-Then phrasing for clarity
          - Record under Dev Agent Record as subsection "Test Case Descriptions"
          - Reference the task/subtask being tested

    - id: TEST-IMPL-1
      title: Write Test Cases with Mocks
      description: Implement tests based on descriptions
      action:
        type: file_operation
        operation: create
        content: |
          - Implement tests based on the descriptions
          - Use mocks/stubs where appropriate
          - Keep tests isolated and deterministic
          - Output: Test files/cases added

    - id: IMPLEMENT-1
      title: Implement Task and Subtasks
      description: Write production code to satisfy tests
      action:
        type: file_operation
        operation: create
        content: |
          - Write production code to satisfy the tests
          - Keep changes scoped to the current task/subtask
          - Update File List with files created/modified (paths relative to repo root)
          - Output: Implementation ready for validation

    - id: REPEAT-1
      title: Check for Remaining Tasks
      description: Determine if more tasks remain
      action:
        type: decision
        prompt: Are there incomplete tasks/subtasks remaining?
      condition:
        if: "tasks_remaining == true"
        then: "TASK-1"
        else: "VALIDATE-1"

    - id: VALIDATE-1
      title: Execute Validations
      description: Run tests and validation tasks
      action:
        type: command
        command: "*run-tests"
        content: |
          - Run test suite
          - Execute dependency task: validate-next-story
          - Execute checklist: story-dod-checklist
      retry:
        max_attempts: 3
        delay_seconds: 0
      on_failure: continue

    - id: VALIDATE-2
      title: Handle Validation Failures
      description: Fix issues or mark as blocked
      action:
        type: decision
        content: |
          If failures occur and not due to incorrect tests:
          - Fix the corresponding implementation
          - Retry validation (max 3 attempts)
          - On 3rd failure: Set Status = "Blocked" and HALT
      condition:
        if: "validation_failed && attempts >= 3"
        then: "BLOCK-1"

    - id: UPDATE-1
      title: Mark Checkboxes and Update Story
      description: Update story file with completion status
      action:
        type: file_operation
        operation: update
        target: "{story_path}"
        content: |
          - Mark completed Tasks/Subtasks with [x]
          - Update allowed sections (see outputs.updates.sections)
          - Only toggle - [ ] â†’ - [x]; do not rename, reorder, or edit task text
          - Output: Updated story file saved

    - id: BLOCK-1
      title: Handle Blocked Conditions
      description: Set status to Blocked when conditions met
      action:
        type: file_operation
        operation: update
        target: "{story_path}"
        content: |
          Set Status to "Blocked" if any apply:
          - Unapproved dependencies needed (confirm with user)
          - Ambiguity remains after story check
          - Three consecutive implementation/fix failures
          - Missing configuration
          - Failing regression
      on_failure: halt

    - id: COMPLETE-1
      title: Complete Story Implementation
      description: Final validation and status update
      action:
        type: validation
        content: |
          Declare implementation complete only when all items below are true:
          - All Tasks and Subtasks are marked [x] and have tests
          - Validations and full regression pass
          - File List is complete
          - execute-checklist has been run with story-dod-checklist
          - Story Status is updated:
            * "Blocked" if any blocking condition is met
            * "Ready for Review" otherwise
          - HALT

dependencies:
  tasks:
    - execute-checklist
    - validate-next-story
  checklists:
    - story-dod-checklist

blocking_conditions:
  - condition: Unapproved dependencies needed
    message: Story requires dependencies not approved by user
    severity: error
  - condition: Ambiguity in requirements
    message: Story requirements are not clear enough to implement
    severity: error
  - condition: Three consecutive implementation failures
    message: Failed to implement correctly after 3 attempts
    severity: critical
  - condition: Missing configuration
    message: Required configuration not found in core-config.yaml
    severity: critical
  - condition: Failing regression
    message: Implementation breaks existing functionality
    severity: critical

completion:
  checklist: story-dod-checklist
  criteria:
    - All Tasks and Subtasks marked complete
    - All tests written and passing
    - Validations and regression pass
    - File List is complete
    - Status updated appropriately

metadata:
  author: BMAD Core Team
  created: 2024-01-01
  lastModified: 2024-01-01
  tags:
    - development
    - tdd
    - implementation
    - testing
  complexity: complex
  estimated_duration: 2h-8h
