$schema: ../../../schemas/task.schema.json
id: review-story
title: Review Story
version: 1.0.0
purpose: Perform a comprehensive test architecture review with quality gate decision. This adaptive, risk-aware review creates both a story update and a detailed gate file.
category: quality
agent: qa

inputs:
  required:
    - name: story_id
      type: story_id
      description: Story identifier in format {epic}.{story}
      pattern: "^\\d+\\.\\d+$"
      examples: ["1.3", "2.5"]
    - name: story_path
      type: path
      description: Path to story file from devStoryLocation
      examples: ["{devStoryLocation}/{epic}.{story}.*.md"]
    - name: story_title
      type: string
      description: Story title (derive from story file H1 if missing)
    - name: story_slug
      type: string
      description: Story slug (derive from title if missing - lowercase, hyphenated)
      pattern: "^[a-z0-9-]+$"

prerequisites:
  status:
    - entity: story
      field: status
      value: Review
  files:
    - "{story_path}"
  commands:
    - command: "test -f {story_path}"
      expected_exit_code: 0

process:
  mode: sequential
  steps:
    - id: RISK-ASSESSMENT
      title: Risk Assessment (Determines Review Depth)
      description: Auto-escalate to deep review based on risk factors
      action:
        type: analysis
        prompt: |
          Evaluate if deep review is needed when:
          - Auth/payment/security files touched
          - No tests added to story
          - Diff > 500 lines
          - Previous gate was FAIL/CONCERNS
          - Story has > 5 acceptance criteria

    - id: REQ-TRACE
      title: Requirements Traceability
      description: Map each acceptance criteria to its validating tests
      action:
        type: analysis
        prompt: |
          - Map each acceptance criteria to tests
          - Document mapping with Given-When-Then (not test code)
          - Identify coverage gaps
          - Verify all requirements have corresponding test cases

    - id: CODE-QUALITY
      title: Code Quality Review (Advisory Only)
      description: Review code quality without making changes
      action:
        type: analysis
        prompt: |
          Review (advisory only):
          - Architecture and design patterns
          - Refactoring opportunities (recommend, do not implement)
          - Code duplication or inefficiencies
          - Performance optimizations
          - Security vulnerabilities
          - Best practices adherence

    - id: TEST-ARCH
      title: Test Architecture Assessment
      description: Evaluate test coverage and design
      action:
        type: analysis
        prompt: |
          Assess:
          - Test coverage adequacy at appropriate levels
          - Test level appropriateness (unit vs integration vs e2e)
          - Test design quality and maintainability
          - Test data management strategy
          - Mock/stub usage appropriateness
          - Edge case and error scenario coverage
          - Test execution time and reliability

    - id: NFR-CHECK
      title: Non-Functional Requirements Check
      description: Evaluate NFR compliance
      action:
        type: analysis
        prompt: |
          Check NFRs:
          - Security: Authentication, authorization, data protection
          - Performance: Response times, resource usage
          - Reliability: Error handling, recovery mechanisms
          - Maintainability: Code clarity, documentation

    - id: TESTABILITY
      title: Testability Evaluation
      description: Assess testability aspects
      action:
        type: analysis
        prompt: |
          Evaluate:
          - Controllability: Can we control the inputs?
          - Observability: Can we observe the outputs?
          - Debuggability: Can we debug failures easily?

    - id: TECH-DEBT
      title: Technical Debt Identification
      description: Identify accumulated technical debt
      action:
        type: analysis
        prompt: |
          Identify:
          - Accumulated shortcuts
          - Missing tests
          - Outdated dependencies
          - Architecture violations

    - id: ADVISORY
      title: Advisory Improvements
      description: Provide actionable recommendations without code changes
      action:
        type: analysis
        prompt: |
          Provide:
          - Do NOT modify source code or tests
          - Actionable recommendations and prioritized fix list
          - Example diffs or pseudocode only if needed (do not apply)
          - Do NOT alter story content beyond QA Results section
          - Do NOT change story Status or File List

    - id: STANDARDS
      title: Standards Compliance Check
      description: Verify adherence to project standards
      action:
        type: validation
        validation:
          type: checklist
          required: true

    - id: AC-VALIDATION
      title: Acceptance Criteria Validation
      description: Verify each AC is fully implemented
      action:
        type: validation
        validation:
          type: requirements
          required: true

    - id: UPDATE-STORY
      title: Update Story File - QA Results Section ONLY
      description: Append QA results to story file
      action:
        type: file_operation
        operation: update
        target: "{story_path}"
        content: |
          Append to QA Results section only.
          If section doesn't exist, append at end.
          Never edit other sections.

    - id: CREATE-GATE
      title: Create Quality Gate File
      description: Generate quality gate YAML file
      action:
        type: file_operation
        operation: create
        target: "{qa.qaLocation}/gates/{epic}.{story}-{slug}.yml"
        content: |
          Render from ../templates/qa-gate-tmpl.yaml
          Include gate decision, risk summary, NFR validation

outputs:
  artifacts:
    - name: quality_gate
      type: file
      path: "{qa.qaLocation}/gates/{epic}.{story}-{slug}.yml"
      format: yaml
      description: Quality gate assessment file with pass/fail decision
    - name: risk_profile
      type: file
      path: "{qa.qaLocation}/assessments/{epic}.{story}-risk-{YYYYMMDD}.md"
      format: markdown
      description: Risk assessment matrix
    - name: nfr_assessment
      type: file
      path: "{qa.qaLocation}/assessments/{epic}.{story}-nfr-{YYYYMMDD}.md"
      format: markdown
      description: Non-functional requirements assessment
  updates:
    - target: "{story_path}"
      sections:
        - "QA Results"
      restrictions: "Only append to QA Results section, never modify other sections"

dependencies:
  templates:
    - qa-gate-tmpl.yaml
  data:
    - technical-preferences.md
  checklists:
    - coding-standards.md
    - unified-project-structure.md
    - testing-strategy.md

blocking_conditions:
  - condition: "Story file is incomplete or missing critical sections"
    message: "Story file must be complete before review"
    severity: error
  - condition: "File List is empty or clearly incomplete"
    message: "Developer must complete File List before review"
    severity: error
  - condition: "No tests exist when they were required"
    message: "Tests are required for this story"
    severity: critical
  - condition: "Code changes don't align with story requirements"
    message: "Implementation doesn't match requirements"
    severity: critical
  - condition: "Critical architectural issues that require discussion"
    message: "Architecture issues need resolution before review"
    severity: critical

completion:
  criteria:
    - Story QA Results section updated
    - Quality gate file created
    - Status recommendation provided
    - All findings documented
    - Actionable recommendations provided
  validations:
    - command: "test -f {qa.qaLocation}/gates/{epic}.{story}-{slug}.yml"
      expected_output: "file exists"

metadata:
  author: BMAD Core Team
  created: "2024-01-01"
  lastModified: "2024-01-01"
  tags:
    - quality
    - testing
    - review
    - gate
  complexity: complex
  estimated_duration: "30m-2h"
