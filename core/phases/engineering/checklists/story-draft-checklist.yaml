$schema: ../../../internal/checklist.schema.json
id: story-draft-checklist
title: Story Draft Checklist
version: 1.0.0
description: The Product Development Master (PDM) should use this checklist to validate that each story contains sufficient context for a developer agent to implement it successfully, while assuming the dev agent has reasonable capabilities to figure things out.
category: planning
scope: story
items:
  # Goal & Context Clarity
  - id: GOAL-001
    text: Story goal/purpose is clearly stated
    required: true
    category: requirements
    verification:
      type: manual
      instructions: Verify the story states WHAT functionality to implement
  - id: GOAL-002
    text: Relationship to epic goals is evident
    required: true
    category: requirements
    verification:
      type: manual
      instructions: Check how this fits into the larger epic/product
  - id: GOAL-003
    text: How the story fits into overall system flow is explained
    required: true
    category: requirements
    verification:
      type: manual
      instructions: Verify system integration context is clear
  - id: GOAL-004
    text: Dependencies on previous stories are identified (if applicable)
    required: false
    category: requirements
    verification:
      type: manual
      instructions: Check for explicit dependencies like "requires Story X to be complete"
  - id: GOAL-005
    text: Business context and value are clear
    required: true
    category: requirements
    verification:
      type: manual
      instructions: Verify business value or user benefit is explained

  # Technical Implementation Guidance
  - id: TECH-001
    text: Key files to create/modify are identified (not necessarily exhaustive)
    required: true
    category: requirements
    verification:
      type: manual
      instructions: Check that important files/components are mentioned
  - id: TECH-002
    text: Technologies specifically needed for this story are mentioned
    required: true
    category: requirements
    verification:
      type: manual
      instructions: Verify technology choices are specified where non-obvious
  - id: TECH-003
    text: Critical APIs or interfaces are sufficiently described
    required: true
    category: requirements
    verification:
      type: manual
      instructions: Check integration points with existing code are identified
  - id: TECH-004
    text: Necessary data models or structures are referenced
    required: true
    category: requirements
    verification:
      type: manual
      instructions: Verify data models or API contracts are defined or referenced
  - id: TECH-005
    text: Required environment variables are listed (if applicable)
    required: false
    category: requirements
    verification:
      type: manual
      instructions: Check for environment configuration requirements
  - id: TECH-006
    text: Any exceptions to standard coding patterns are noted
    required: false
    category: requirements
    verification:
      type: manual
      instructions: Verify non-standard patterns or exceptions are called out

  # Reference Effectiveness
  - id: REF-001
    text: References to external documents point to specific relevant sections
    required: true
    category: documentation
    verification:
      type: manual
      instructions: Check references point to specific sections, not whole documents
  - id: REF-002
    text: Critical information from previous stories is summarized (not just referenced)
    required: true
    category: documentation
    verification:
      type: manual
      instructions: Verify previous story context is summarized if needed
  - id: REF-003
    text: Context is provided for why references are relevant
    required: true
    category: documentation
    verification:
      type: manual
      instructions: Check relevance of each reference is explained
  - id: REF-004
    text: References use consistent format (e.g., {@docs.root}/<filename>.md#section)
    required: true
    category: documentation
    verification:
      type: manual
      instructions: Verify consistent reference formatting

  # Self-Containment Assessment
  - id: SELF-001
    text: Core information needed is included (not overly reliant on external docs)
    required: true
    category: requirements
    verification:
      type: manual
      instructions: Check core requirements are in the story, not just in references
  - id: SELF-002
    text: Implicit assumptions are made explicit
    required: true
    category: requirements
    verification:
      type: manual
      instructions: Verify assumptions are stated explicitly
  - id: SELF-003
    text: Domain-specific terms or concepts are explained
    required: true
    category: documentation
    verification:
      type: manual
      instructions: Check domain terms are explained or obvious from context
  - id: SELF-004
    text: Edge cases or error scenarios are addressed
    required: true
    category: requirements
    verification:
      type: manual
      instructions: Verify edge cases are mentioned (even if deferred)

  # Testing Guidance
  - id: TEST-001
    text: Required testing approach is outlined
    required: true
    category: testing
    verification:
      type: manual
      instructions: Check test approach is specified (unit, integration, e2e)
  - id: TEST-002
    text: Key test scenarios are identified
    required: true
    category: testing
    verification:
      type: manual
      instructions: Verify main test scenarios are listed
  - id: TEST-003
    text: Success criteria are defined
    required: true
    category: testing
    verification:
      type: manual
      instructions: Check success criteria are measurable
  - id: TEST-004
    text: Special testing considerations are noted (if applicable)
    required: false
    category: testing
    verification:
      type: manual
      instructions: Verify special test considerations are documented

metadata:
  author: Thien Huynh
  created: "2025-08-21"
  tags: ["story", "validation", "planning", "requirements"]
